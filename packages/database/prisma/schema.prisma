generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Note {
  noteId      String   @id @default(uuid()) @db.VarChar(36)
  title       String
  documentUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Task Task[]
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Task {
  taskId    String     @id @default(uuid()) @db.VarChar(36)
  title     String
  status    TaskStatus @default(TODO)
  order     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  note   Note   @relation(fields: [noteId], references: [noteId], onDelete: Cascade)
  noteId String

  @@index([noteId])
}
